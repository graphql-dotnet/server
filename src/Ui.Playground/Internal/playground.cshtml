<!DOCTYPE html>
<html>
<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, minimal-ui">
  <title>Graphcool Playground</title>
  <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/graphql-playground-react/build/static/css/index.css" />
  <link rel="shortcut icon" href="//cdn.jsdelivr.net/npm/graphql-playground-react/build/favicon.png" />
  <script src="//cdn.jsdelivr.net/npm/graphql-playground-react/build/static/js/middleware.js"></script>
</head>
<body>
  <div id="root">
    <style>
      body {
        background-color: rgb(23,42,58);
        font-family: Open Sans,sans-serif;
        height: 90vh;
      }

      #root {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .loading {
        font-size: 32px;
        font-weight: 200;
        color: rgba(255,255,255,.6);
        margin-left: 20px;
      }

      img {
        width: 78px;
        height: 78px;
      }

      .title {
        font-weight: 400;
      }
    </style>
    <img src='//cdn.jsdelivr.net/npm/graphql-playground-react/build/logo.png' alt=''>
    <div class="loading">
      Loading <span class="title">GraphQL Playground</span>
    </div>
  </div>
  <script>
    function getSubscriptionsEndPoint() {
      let subscriptionsEndPoint = "@Model.SubscriptionsEndPoint";
      if (/^(?:[a-z]+:)?\/\//i.test(subscriptionsEndPoint)) {
        // if location includes protocol (e.g. "wss://") then return exact string
        return subscriptionsEndPoint;
      } else if (subscriptionsEndPoint[0] != '/') {
        // if location is relative (e.g. "api") then prepend host and current path
        let currentUrl = /^[^?]*(?=\/)/.exec(window.location.pathname);
        currentUrl = currentUrl ? currentUrl[0] : '';
        while (subscriptionsEndPoint.substring(0, 3) == '../') {
          subscriptionsEndPoint = subscriptionsEndPoint.substring(3);
          currentUrl = /^[^?]*(?=\/)/.exec(currentUrl);
          currentUrl = currentUrl ? currentUrl[0] : '';
        }
        return (window.location.protocol === "http:" ? "ws://" : "wss://") + window.location.host + currentUrl + '/' + subscriptionsEndPoint;
      }
      // if location is absolute (e.g. "/api") then prepend host only
      return (window.location.protocol === "http:" ? "ws://" : "wss://") + window.location.host + subscriptionsEndPoint;
    }

    window.addEventListener('load', function (event) {
      GraphQLPlayground.init(document.getElementById('root'),
        {
          setTitle: true,
          endpoint: "@Model.GraphQLEndPoint",
          subscriptionEndpoint: getSubscriptionsEndPoint(),
          config: @Model.GraphQLConfig,
          settings: @Model.PlaygroundSettings,
          headers: @Model.Headers,
        });
    })
  </script>
</body>
</html>
