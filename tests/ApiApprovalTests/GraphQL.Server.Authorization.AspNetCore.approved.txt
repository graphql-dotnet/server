namespace GraphQL.Server.Authorization.AspNetCore
{
    public class AuthorizationError : GraphQL.Validation.ValidationError
    {
        public AuthorizationError(GraphQLParser.AST.ASTNode? node, GraphQL.Validation.ValidationContext context, string message, Microsoft.AspNetCore.Authorization.AuthorizationResult result, GraphQLParser.AST.OperationType? operationType = default) { }
        public virtual Microsoft.AspNetCore.Authorization.AuthorizationResult AuthorizationResult { get; }
        public GraphQLParser.AST.OperationType? OperationType { get; }
    }
    public class AuthorizationValidationRule : GraphQL.Validation.IValidationRule
    {
        public AuthorizationValidationRule(Microsoft.AspNetCore.Authorization.IAuthorizationService authorizationService, GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor claimsPrincipalAccessor, GraphQL.Server.Authorization.AspNetCore.IAuthorizationErrorMessageBuilder messageBuilder) { }
        protected virtual void AddValidationError(GraphQLParser.AST.ASTNode? node, GraphQL.Validation.ValidationContext context, GraphQLParser.AST.OperationType? operationType, Microsoft.AspNetCore.Authorization.AuthorizationResult result) { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultAuthorizationErrorMessageBuilder : GraphQL.Server.Authorization.AspNetCore.IAuthorizationErrorMessageBuilder
    {
        public DefaultAuthorizationErrorMessageBuilder() { }
        public virtual void AppendFailureHeader(System.Text.StringBuilder error, GraphQLParser.AST.OperationType? operationType) { }
        public virtual void AppendFailureLine(System.Text.StringBuilder error, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement authorizationRequirement) { }
        public virtual string GenerateMessage(GraphQLParser.AST.OperationType? operationType, Microsoft.AspNetCore.Authorization.AuthorizationResult result) { }
    }
    public class DefaultClaimsPrincipalAccessor : GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor
    {
        public DefaultClaimsPrincipalAccessor(Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor) { }
        public System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context) { }
    }
    public interface IAuthorizationErrorMessageBuilder
    {
        void AppendFailureHeader(System.Text.StringBuilder error, GraphQLParser.AST.OperationType? operationType);
        void AppendFailureLine(System.Text.StringBuilder error, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement authorizationRequirement);
        string GenerateMessage(GraphQLParser.AST.OperationType? operationType, Microsoft.AspNetCore.Authorization.AuthorizationResult result);
    }
    public interface IClaimsPrincipalAccessor
    {
        System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context);
    }
}
namespace GraphQL.Server
{
    public static class GraphQLBuilderAuthorizationExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.DI.IGraphQLBuilder builder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>? configure) { }
    }
}