namespace GraphQL.Server.Authorization.AspNetCore
{
    public static class AuthorizationMetadataExtensions
    {
        public const string POLICY_KEY = "Authorization__Policies";
        [System.Obsolete("This method will be removed in v5. Use TMetadataProvider AuthorizeWith<TMetadataP" +
            "rovider>(this TMetadataProvider provider, string policy) instead.")]
        public static void AuthorizeWith(this GraphQL.Types.IProvideMetadata type, string policy) { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> AuthorizeWith<TSourceType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, string policy) { }
        public static TMetadataProvider AuthorizeWith<TMetadataProvider>(this TMetadataProvider provider, string policy)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> AuthorizeWith<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, string policy) { }
        public static System.Collections.Generic.List<string> GetPolicies(this GraphQL.Types.IProvideMetadata provider) { }
        public static bool RequiresAuthorization(this GraphQL.Types.IProvideMetadata provider) { }
    }
    public class AuthorizationValidationRule : GraphQL.Validation.IValidationRule
    {
        public AuthorizationValidationRule(Microsoft.AspNetCore.Authorization.IAuthorizationService authorizationService, GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor claimsPrincipalAccessor) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultClaimsPrincipalAccessor : GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor
    {
        public DefaultClaimsPrincipalAccessor(Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor) { }
        public System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context) { }
    }
    public class GraphQLAuthorizeAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLAuthorizeAttribute() { }
        public string Policy { get; set; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public interface IClaimsPrincipalAccessor
    {
        System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context);
    }
}
namespace GraphQL.Server
{
    public static class GraphQLBuilderAuthorizationExtensions
    {
        public static GraphQL.Server.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.Server.IGraphQLBuilder builder) { }
        public static GraphQL.Server.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.Server.IGraphQLBuilder builder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions> options) { }
    }
}