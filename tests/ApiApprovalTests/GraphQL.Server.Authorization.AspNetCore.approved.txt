namespace GraphQL.Server.Authorization.AspNetCore
{
    public class AuthorizationError : GraphQL.Validation.ValidationError
    {
        public AuthorizationError(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.OperationType? operationType, Microsoft.AspNetCore.Authorization.AuthorizationResult result) { }
        public AuthorizationError(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context, string message, Microsoft.AspNetCore.Authorization.AuthorizationResult result) { }
        public virtual Microsoft.AspNetCore.Authorization.AuthorizationResult AuthorizationResult { get; }
        public GraphQL.Language.AST.OperationType? OperationType { get; }
        public static void AppendFailureHeader(System.Text.StringBuilder error, GraphQL.Language.AST.OperationType? operationType) { }
        public static void AppendFailureLine(System.Text.StringBuilder error, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement authorizationRequirement) { }
    }
    public class AuthorizationValidationRule : GraphQL.Validation.IValidationRule
    {
        public AuthorizationValidationRule(Microsoft.AspNetCore.Authorization.IAuthorizationService authorizationService, GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor claimsPrincipalAccessor) { }
        protected virtual void AddValidationError(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.OperationType? operationType, Microsoft.AspNetCore.Authorization.AuthorizationResult result) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultClaimsPrincipalAccessor : GraphQL.Server.Authorization.AspNetCore.IClaimsPrincipalAccessor
    {
        public DefaultClaimsPrincipalAccessor(Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor) { }
        public System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context) { }
    }
    public class GraphQLAuthorizeAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLAuthorizeAttribute() { }
        public string Policy { get; set; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public interface IClaimsPrincipalAccessor
    {
        System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(GraphQL.Validation.ValidationContext context);
    }
}
namespace GraphQL.Server
{
    public static class GraphQLBuilderAuthorizationExtensions
    {
        public static GraphQL.Server.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.Server.IGraphQLBuilder builder) { }
        public static GraphQL.Server.IGraphQLBuilder AddGraphQLAuthorization(this GraphQL.Server.IGraphQLBuilder builder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions> options) { }
    }
}