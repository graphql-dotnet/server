namespace GraphQL.Server.Transports.Subscriptions.Abstractions
{
    public interface IMessageTransport
    {
        GraphQL.Server.Transports.Subscriptions.Abstractions.IReaderPipeline Reader { get; }
        GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline Writer { get; }
    }
    public interface IOperationMessageListener
    {
        System.Threading.Tasks.Task AfterHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context);
        System.Threading.Tasks.Task BeforeHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context);
        System.Threading.Tasks.Task HandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context);
    }
    public interface IReaderPipeline
    {
        System.Threading.Tasks.Task Completion { get; }
        System.Threading.Tasks.Task Complete();
        void LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<GraphQL.Transport.OperationMessage> target);
    }
    public interface IServerOperations
    {
        GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager Subscriptions { get; }
        GraphQL.Server.Transports.Subscriptions.Abstractions.IReaderPipeline TransportReader { get; }
        GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline TransportWriter { get; }
        System.Threading.Tasks.Task Terminate();
    }
    public interface ISubscriptionManager : System.Collections.Generic.IEnumerable<GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription>, System.Collections.IEnumerable
    {
        System.Threading.Tasks.Task SubscribeOrExecuteAsync(string id, GraphQL.Transport.GraphQLRequest payload, GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context);
        System.Threading.Tasks.Task UnsubscribeAsync(string id);
    }
    public interface IWriterPipeline
    {
        System.Threading.Tasks.Task Completion { get; }
        System.Threading.Tasks.Task Complete();
        bool Post(GraphQL.Transport.OperationMessage message);
        System.Threading.Tasks.Task SendAsync(GraphQL.Transport.OperationMessage message);
    }
    public class LogMessagesListener : GraphQL.Server.Transports.Subscriptions.Abstractions.IOperationMessageListener
    {
        public LogMessagesListener(Microsoft.Extensions.Logging.ILogger<GraphQL.Server.Transports.Subscriptions.Abstractions.LogMessagesListener> logger) { }
        public System.Threading.Tasks.Task AfterHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
        public System.Threading.Tasks.Task BeforeHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
        public System.Threading.Tasks.Task HandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
    }
    public class MessageHandlingContext : System.Collections.Generic.Dictionary<string, object>, System.IDisposable
    {
        public MessageHandlingContext(GraphQL.Server.Transports.Subscriptions.Abstractions.IServerOperations server, GraphQL.Transport.OperationMessage message) { }
        public GraphQL.Transport.OperationMessage Message { get; }
        public System.Collections.Concurrent.ConcurrentDictionary<string, object> Properties { get; set; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.IReaderPipeline Reader { get; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager Subscriptions { get; }
        public bool Terminated { get; set; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline Writer { get; }
        public void Dispose() { }
        public T Get<T>(string key) { }
        public System.Threading.Tasks.Task Terminate() { }
    }
    public class MessageType
    {
        public const string GQL_COMPLETE = "complete";
        public const string GQL_CONNECTION_ACK = "connection_ack";
        public const string GQL_CONNECTION_ERROR = "connection_error";
        public const string GQL_CONNECTION_INIT = "connection_init";
        public const string GQL_CONNECTION_KEEP_ALIVE = "ka";
        public const string GQL_CONNECTION_TERMINATE = "connection_terminate";
        public const string GQL_DATA = "data";
        public const string GQL_ERROR = "error";
        public const string GQL_START = "start";
        public const string GQL_STOP = "stop";
        public MessageType() { }
    }
    public class ProtocolMessageListener : GraphQL.Server.Transports.Subscriptions.Abstractions.IOperationMessageListener
    {
        public ProtocolMessageListener(Microsoft.Extensions.Logging.ILogger<GraphQL.Server.Transports.Subscriptions.Abstractions.ProtocolMessageListener> logger, GraphQL.IGraphQLSerializer serializer) { }
        public System.Threading.Tasks.Task AfterHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
        public System.Threading.Tasks.Task BeforeHandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
        public System.Threading.Tasks.Task HandleAsync(GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
    }
    public class Subscription : System.IDisposable, System.IObserver<GraphQL.ExecutionResult>
    {
        public Subscription(string id, GraphQL.Transport.GraphQLRequest payload, GraphQL.Subscription.SubscriptionExecutionResult result, GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline writer, System.Action<GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription>? completed, Microsoft.Extensions.Logging.ILogger<GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription> logger) { }
        public string Id { get; }
        public GraphQL.Transport.GraphQLRequest OriginalPayload { get; }
        public virtual void Dispose() { }
        public void OnCompleted() { }
        public void OnError(System.Exception error) { }
        public void OnNext(GraphQL.ExecutionResult value) { }
        public System.Threading.Tasks.Task UnsubscribeAsync() { }
    }
    public class SubscriptionManager : GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager, System.Collections.Generic.IEnumerable<GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription>, System.Collections.IEnumerable, System.IDisposable
    {
        [System.Obsolete]
        public SubscriptionManager(GraphQL.Server.IGraphQLExecuter executer, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }
        public SubscriptionManager(GraphQL.Server.IGraphQLExecuter executer, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory) { }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription this[string id] { get; }
        public virtual void Dispose() { }
        public System.Collections.Generic.IEnumerator<GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription> GetEnumerator() { }
        public System.Threading.Tasks.Task SubscribeOrExecuteAsync(string id, GraphQL.Transport.GraphQLRequest payload, GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext context) { }
        public System.Threading.Tasks.Task UnsubscribeAsync(string id) { }
    }
    public class SubscriptionServer : GraphQL.Server.Transports.Subscriptions.Abstractions.IServerOperations, System.IDisposable
    {
        public SubscriptionServer(GraphQL.Server.Transports.Subscriptions.Abstractions.IMessageTransport transport, GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager subscriptions, System.Collections.Generic.IEnumerable<GraphQL.Server.Transports.Subscriptions.Abstractions.IOperationMessageListener> messageListeners, Microsoft.Extensions.Logging.ILogger<GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer> logger) { }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager Subscriptions { get; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.IMessageTransport Transport { get; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.IReaderPipeline TransportReader { get; set; }
        public GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline TransportWriter { get; set; }
        public virtual void Dispose() { }
        public System.Threading.Tasks.Task OnConnect() { }
        public System.Threading.Tasks.Task OnDisconnect() { }
        public System.Threading.Tasks.Task Terminate() { }
    }
}