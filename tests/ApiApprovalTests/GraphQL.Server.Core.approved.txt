namespace GraphQL.Server
{
    public class BasicGraphQLExecuter<TSchema> : GraphQL.Server.IGraphQLExecuter, GraphQL.Server.IGraphQLExecuter<TSchema>
        where TSchema : GraphQL.Types.ISchema
    {
        public BasicGraphQLExecuter(TSchema schema, GraphQL.IDocumentExecuter documentExecuter, Microsoft.Extensions.Options.IOptions<GraphQL.Server.GraphQLOptions> options) { }
        public TSchema Schema { get; }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object> context, System.IServiceProvider requestServices, System.Threading.CancellationToken cancellationToken = default) { }
        protected virtual GraphQL.ExecutionOptions GetOptions(GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object> context, System.IServiceProvider requestServices, System.Threading.CancellationToken cancellationToken) { }
    }
    [System.Obsolete]
    public class DefaultGraphQLExecuter<TSchema> : GraphQL.Server.IGraphQLExecuter, GraphQL.Server.IGraphQLExecuter<TSchema>
        where TSchema : GraphQL.Types.ISchema
    {
        public DefaultGraphQLExecuter(TSchema schema, GraphQL.IDocumentExecuter documentExecuter, Microsoft.Extensions.Options.IOptions<GraphQL.Server.GraphQLOptions> options, System.Collections.Generic.IEnumerable<GraphQL.Execution.IDocumentExecutionListener> listeners, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> validationRules) { }
        public TSchema Schema { get; }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object> context, System.IServiceProvider requestServices, System.Threading.CancellationToken cancellationToken = default) { }
        protected virtual GraphQL.ExecutionOptions GetOptions(GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object> context, System.IServiceProvider requestServices, System.Threading.CancellationToken cancellationToken) { }
    }
    public static class GraphQLBuilderCoreExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddServer(this GraphQL.DI.IGraphQLBuilder builder, bool installMetricsMiddleware, System.Action<GraphQL.Server.GraphQLOptions>? configureOptions) { }
        public static GraphQL.DI.IGraphQLBuilder AddServer(this GraphQL.DI.IGraphQLBuilder builder, bool installMetricsMiddleware, System.Action<GraphQL.Server.GraphQLOptions, System.IServiceProvider>? configureOptions = null) { }
    }
    public class GraphQLOptions
    {
        public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate;
        public GraphQLOptions() { }
        public GraphQL.Validation.Complexity.ComplexityConfiguration ComplexityConfiguration { get; set; }
        public bool EnableMetrics { get; set; }
        public int? MaxParallelExecutionCount { get; set; }
    }
    public interface IGraphQLExecuter
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object> context, System.IServiceProvider requestServices, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IGraphQLExecuter<TSchema> : GraphQL.Server.IGraphQLExecuter
        where TSchema : GraphQL.Types.ISchema
    {
        TSchema Schema { get; }
    }
}